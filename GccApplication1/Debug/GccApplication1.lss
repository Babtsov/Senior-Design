
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000613  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000190  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024b  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b8  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000177  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001057  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  7a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_write>:
}


void lcd_write(uint8_t byte)
{
    lcdPort &= ~(1 << lcdD7Bit);                        // assume that data is '0'
  82:	96 98       	cbi	0x12, 6	; 18
    if (byte & 1 << 7) lcdPort |= (1 << lcdD7Bit);     // make data = '1' if necessary
  84:	88 23       	and	r24, r24
  86:	0c f4       	brge	.+2      	; 0x8a <lcd_write+0x8>
  88:	96 9a       	sbi	0x12, 6	; 18

    lcdPort &= ~(1 << lcdD6Bit);                        // repeat for each data bit
  8a:	95 98       	cbi	0x12, 5	; 18
    if (byte & 1 << 6) lcdPort |= (1 << lcdD6Bit);
  8c:	86 fd       	sbrc	r24, 6
  8e:	95 9a       	sbi	0x12, 5	; 18

    lcdPort &= ~(1 << lcdD5Bit);
  90:	94 98       	cbi	0x12, 4	; 18
    if (byte & 1 << 5) lcdPort |= (1 << lcdD5Bit);
  92:	85 fd       	sbrc	r24, 5
  94:	94 9a       	sbi	0x12, 4	; 18

    lcdPort &= ~(1 << lcdD4Bit);
  96:	93 98       	cbi	0x12, 3	; 18
    if (byte & 1 << 4) lcdPort |= (1 << lcdD4Bit);
  98:	84 fd       	sbrc	r24, 4
  9a:	93 9a       	sbi	0x12, 3	; 18

                               
    lcdPort |= (1 << lcdEBit);                   // E high
  9c:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	00 00       	nop
    _delay_us(1);                               // data setup 
    lcdPort &= ~(1 << lcdEBit);                // E low
  a0:	92 98       	cbi	0x12, 2	; 18
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_char>:
    }
}


void lcd_char(uint8_t data)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    lcdPort |= (1 << lcdRSBit);                 // RS high
  aa:	91 9a       	sbi	0x12, 1	; 18
    lcdPort &= ~(1 << lcdEBit);                // E low
  ac:	92 98       	cbi	0x12, 2	; 18
    lcd_write(data);                          // write the upper four bits of data
  ae:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
    lcd_write(data << 4);                    // write the lower 4 bits of data
  b2:	8c 2f       	mov	r24, r28
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <lcd_string>:
    _delay_us(50);
}


void lcd_string(char string[])
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
    for (int i = 0; string[i] != 0; i++)
  c6:	88 81       	ld	r24, Y
  c8:	88 23       	and	r24, r24
  ca:	51 f0       	breq	.+20     	; 0xe0 <lcd_string+0x20>
  cc:	21 96       	adiw	r28, 0x01	; 1
    {
        lcd_char(string[i]);
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_char>
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_string+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_string+0x1a>
}


void lcd_string(char string[])
{
    for (int i = 0; string[i] != 0; i++)
  da:	89 91       	ld	r24, Y+
  dc:	81 11       	cpse	r24, r1
  de:	f7 cf       	rjmp	.-18     	; 0xce <lcd_string+0xe>
    {
        lcd_char(string[i]);
        _delay_us(50);
    }
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <lcd_instruction>:
    lcd_write(data << 4);                    // write the lower 4 bits of data
}


void lcd_instruction(uint8_t instruction)
{
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
    lcdPort &= ~(1 << lcdRSBit);                // RS low
  ea:	91 98       	cbi	0x12, 1	; 18
    lcdPort &= ~(1 << lcdEBit);                // E low
  ec:	92 98       	cbi	0x12, 2	; 18
    lcd_write(instruction);                   // write the upper 4 bits of data
  ee:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
    lcd_write(instruction << 4);             // write the lower 4 bits of data
  f2:	8c 2f       	mov	r24, r28
  f4:	82 95       	swap	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <lcd_init>:
    return 0;
}

void lcd_init(void)
{
	lcdDdr |= (1 << lcdD7Bit) | (1 << lcdD6Bit) | (1 << lcdD5Bit) | (1 << lcdD4Bit) | (1 << lcdEBit) | (1 << lcdRSBit);
 100:	81 b3       	in	r24, 0x11	; 17
 102:	8e 67       	ori	r24, 0x7E	; 126
 104:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	87 ea       	ldi	r24, 0xA7	; 167
 108:	91 e6       	ldi	r25, 0x61	; 97
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_init+0xa>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_init+0x10>
 110:	00 00       	nop
    _delay_ms(100);                                
    lcdPort &= ~(1 << lcdRSBit);
 112:	91 98       	cbi	0x12, 1	; 18
    lcdPort &= ~(1 << lcdEBit);
 114:	92 98       	cbi	0x12, 2	; 18
    lcd_write(reset);                 
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_init+0x20>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x26>
 126:	00 00       	nop
    _delay_ms(8);
    lcd_write(reset);                 
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	92 e4       	ldi	r25, 0x42	; 66
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x30>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_init+0x36>
    _delay_us(200);
    lcd_write(reset);                 
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 13c:	82 e4       	ldi	r24, 0x42	; 66
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0x3e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x44>
    _delay_us(200);                                 
    lcd_write(bit4Mode);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_init+0x4c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_init+0x52>
    _delay_us(50);
    lcd_instruction(bit4Mode);
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_instruction>
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_init+0x5a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_init+0x60>
    _delay_us(50);
    lcd_instruction(off);
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_instruction>
 166:	90 e1       	ldi	r25, 0x10	; 16
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_init+0x68>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_init+0x6e>
    _delay_us(50);                                  
    lcd_instruction(clear);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8d ee       	ldi	r24, 0xED	; 237
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_init+0x78>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_init+0x7e>
 17e:	00 00       	nop
    _delay_ms(3);
    lcd_instruction(entryMode);
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	9d e0       	ldi	r25, 0x0D	; 13
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x88>
 18c:	00 00       	nop
    _delay_us(40);
    lcd_instruction(on);
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_instruction>
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x96>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x9c>
 19c:	08 95       	ret

0000019e <main>:
long adc_read(void);


int main(void)
{
    lcd_init(); 
 19e:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
	lcd_string("judge me free");	
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 60 00 	call	0xc0	; 0xc0 <lcd_string>
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0xc>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
